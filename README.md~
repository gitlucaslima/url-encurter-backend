Aqui est√° uma vers√£o melhorada do seu README para o projeto:

---

# URL Encoder Backend

[![Build Status](https://travis-ci.com/gitlucaslima/url-encoder-backend.svg?branch=main)](https://travis-ci.com/gitlucaslima/url-encoder-backend)  
[![License](https://img.shields.io/github/license/SEU_USUARIO/url-encoder-backend)](LICENSE)

Uma API reativa para encurtamento e redirecionamento de URLs. Desenvolvida com **Quarkus** e **MongoDB**, a aplica√ß√£o √© projetada para oferecer uma maneira eficiente de criar e gerenciar links curtos por meio de uma API RESTful.

## üöÄ Funcionalidades

- **Cria√ß√£o de URLs curtas**: Converte URLs longas em vers√µes curtas e gerenci√°veis.
- **Listagem de URLs**: Recupera todas as URLs encurtadas armazenadas.
- **Informa√ß√µes detalhadas**: Obt√©m detalhes sobre URLs curtas espec√≠ficas.
- **Redirecionamento r√°pido**: Redireciona URLs curtas para seus destinos originais.

---

## üõ†Ô∏è Tecnologias Utilizadas

- **[Quarkus](https://quarkus.io/)**: Framework Java moderno e reativo para alta performance.
- **[MongoDB](https://www.mongodb.com/)**: Banco de dados NoSQL para armazenamento de URLs.
- **[Mutiny](https://smallrye.io/smallrye-mutiny/)**: Biblioteca reativa para programa√ß√£o ass√≠ncrona.
- **RESTful API**: Comunica√ß√£o backend baseada em HTTP.

---

## üöÄ Como Executar o Projeto

### Pr√©-requisitos

- **Java** 11 ou superior.
- **Docker** (para o MongoDB).
- **Maven** ou **Gradle** (para build e execu√ß√£o).

### Passos para Execu√ß√£o

1. **Clone o Reposit√≥rio**:

   ```bash
   git clone https://github.com/SEU_USUARIO/url-encoder-backend.git
   cd url-encoder-backend
   ```

2. **Compile o Projeto**:

   Usando Maven:
   ```bash
   ./mvnw clean install
   ```
   Usando Gradle:
   ```bash
   ./gradlew build
   ```

3. **Inicie a Aplica√ß√£o**:

   Com Maven:
   ```bash
   ./mvnw quarkus:dev
   ```
   Com Gradle:
   ```bash
   ./gradlew quarkusDev
   ```

4. **Endpoint Local**:  
   Acesse [http://localhost:8080](http://localhost:8080).

5. **Criar a Imagem Docker** (opcional):

   ```bash
   docker build -f src/main/docker/Dockerfile.jvm -t url-encoder-backend .
   ```

---

## üìö Endpoints da API

### **1. POST /shorten**

**Descri√ß√£o**: Cria uma URL curta.

**Exemplo de Request**:

```json
{
  "originalUrl": "https://exemplo.com"
}
```

**Exemplo de Response**:

```json
{
  "originalUrl": "https://exemplo.com",
  "shortCode": "abc123",
  "shortUrl": "http://localhost:8080/abc123"
}
```

---

### **2. GET /shorten/all**

**Descri√ß√£o**: Lista todas as URLs curtas registradas.

**Exemplo de Response**:

```json
[
  {
    "originalUrl": "https://exemplo.com",
    "shortCode": "abc123",
    "shortUrl": "http://localhost:8080/abc123"
  }
]
```

---

### **3. GET /shorten/info/{shortCode}**

**Descri√ß√£o**: Obt√©m informa√ß√µes detalhadas de uma URL curta.

- **Path Parameter**: `shortCode` (Exemplo: `abc123`).

**Responses**:
- **200 OK**: Detalhes da URL original.
- **404 Not Found**: C√≥digo curto n√£o encontrado.

---

### **4. GET /shorten/{shortCode}**

**Descri√ß√£o**: Redireciona diretamente para a URL original associada ao c√≥digo curto.

- **Path Parameter**: `shortCode` (Exemplo: `abc123`).

**Comportamento**:
- **302 Found**: Redireciona automaticamente o cliente.

---

## ü§ù Contribuindo

Contribui√ß√µes s√£o bem-vindas! Para contribuir:

1. Crie um fork do reposit√≥rio.
2. Crie uma nova branch para suas altera√ß√µes:
   ```bash
   git checkout -b minha-feature
   ```
3. Fa√ßa suas altera√ß√µes e envie um pull request.

---

## üìú Licen√ßa

Este projeto est√° licenciado sob a [MIT License](LICENSE).

---